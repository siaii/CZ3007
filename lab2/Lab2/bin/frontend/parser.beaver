// package the generated Java class lives in; no need to change this
%package "parser";

// name of the generated Java class; no need to change this
%class "Parser";

// no need to change this either
%embed {:
	// turn off automated error recovery
	@Override
	protected void recoverFromError(Symbol token, TokenStream in) throws java.io.IOException, Exception {
		super.recoverFromError(new Symbol(0), in);
	}
:};

// the list of all terminals; no need to change this
%terminals MODULE, INT, VOID, IF, ELSE, WHILE, RETURN, BREAK, BOOLEAN, PUBLIC, TRUE, FALSE,
           INT_LITERAL, STRING_LITERAL, ID, TYPE, IMPORT,
           PLUS, MINUS, TIMES, DIV, MOD, EQEQ, NEQ, LEQ, GEQ, LT, GT,
           LBRACKET, RPAREN, COMMA, RCURLY, LCURLY, SEMICOLON, RBRACKET, LPAREN, EQL;
           
// declaration of start symbol; no need to change this
%goal Module;


/* TODO: Flesh out the rule for Module, and add rules for other nonterminals. Here is an example
         of a rule you may want to add:
         
   Accessibility = PUBLIC
		  |
		  ;
  */

Module = MODULE ID LCURLY Imports Declarations RCURLY;
Imports = Import Imports
	|	 
	;
Import = IMPORT ID SEMICOLON;
Declarations = Declaration Declarations
	|		
	;
	
Declaration = FuncDeclare
	|		FieldDeclare
	|		TypeDeclare
	;
	
FuncDeclare = AccessId TypeName ID LPAREN ParamList RPAREN LCURLY StmtList RCURLY;

FieldDeclare = AccessId TypeName ID SEMICOLON;

TypeDeclare = AccessId TYPE ID EQL STRING_LITERAL SEMICOLON;

AccessId = PUBLIC
	|
	;

TypeName = PrimitiveType
	|		ArrayType
	|		ID
	;

PrimitiveType = VOID
	|		BOOLEAN
	|		INT
	;
	
ArrayType = PrimitiveType LBRACKET RBRACKET
	|		ArrayType LBRACKET RBRACKET
	| 		ID LBRACKET RBRACKET
	;

Param = TypeName ID;
ParamList = Param COMMA ParamList
	|       Param
	|
	;

StmtList = Stmt StmtList
	|
	;

Stmt = 	TypeName ID SEMICOLON
	|	LCURLY StmtList RCURLY
	|	IF LPAREN Expr RPAREN Stmt
	| 	IF LPAREN Expr RPAREN Stmt ELSE Stmt
	| 	WHILE LPAREN Expr RPAREN Stmt
	| 	BREAK SEMICOLON
	|	RETURN RightHSE SEMICOLON
	|   RETURN SEMICOLON
	|	Expr SEMICOLON
	;
	
	
Expr = Assign
    | RightHSE
    ;

Assign = LeftHSE EQL Expr;

LeftHSE = ID
    | ArrayAcc
    ;

ArrayAcc = ID LBRACKET Expr RBRACKET 
	| ArrayAcc LBRACKET Expr RBRACKET
	;

RightHSE = ArithExpr RightHSEOpt ;

RightHSEOpt = CompOp ArithExpr
    |
    ;

CompOp = EQEQ
    | NEQ
    | LT
    | LEQ
    | GT
    | GEQ
    ;

ArithExpr = ArithExpr AddOp Term
    | Term;
    
AddOp = PLUS
    | MINUS
    ;

Term = Term MultOp Factor
    | Factor
    ;

MultOp = TIMES
    | DIV
    | MOD
    ;

Factor = MINUS Factor
    | PExpr
    ;

PExpr = LeftHSE
    | FuncCall
    | ArrExpr
    | STRING_LITERAL
    | INT_LITERAL
    | TRUE
    | FALSE
    | LPAREN Expr RPAREN
    ;
    
FuncCall = ID LPAREN ExprList RPAREN;

ArrExpr = LBRACKET ExprListNE RBRACKET;

ExprListNE = ExprListNE COMMA Expr
    | Expr
    ;

ExprList = ExprListNE
    |
    ;
	

/**/