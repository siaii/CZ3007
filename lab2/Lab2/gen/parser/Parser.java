package parser;

import beaver.*;
import java.util.ArrayList;

/**
 * This class is a LALR parser generated by
 * <a href="http://beaver.sourceforge.net">Beaver</a> v0.9.6.1
 * from the grammar specification "parser.beaver".
 */
public class Parser extends beaver.Parser {
	static public class Terminals {
		static public final short EOF = 0;
		static public final short ID = 1;
		static public final short LBRACKET = 2;
		static public final short LPAREN = 3;
		static public final short MINUS = 4;
		static public final short STRING_LITERAL = 5;
		static public final short INT_LITERAL = 6;
		static public final short TRUE = 7;
		static public final short FALSE = 8;
		static public final short RPAREN = 9;
		static public final short RCURLY = 10;
		static public final short VOID = 11;
		static public final short BOOLEAN = 12;
		static public final short INT = 13;
		static public final short LCURLY = 14;
		static public final short SEMICOLON = 15;
		static public final short RBRACKET = 16;
		static public final short IF = 17;
		static public final short WHILE = 18;
		static public final short BREAK = 19;
		static public final short RETURN = 20;
		static public final short COMMA = 21;
		static public final short EQL = 22;
		static public final short IMPORT = 23;
		static public final short PUBLIC = 24;
		static public final short PLUS = 25;
		static public final short TIMES = 26;
		static public final short DIV = 27;
		static public final short MOD = 28;
		static public final short TYPE = 29;
		static public final short MODULE = 30;
		static public final short ELSE = 31;
		static public final short EQEQ = 32;
		static public final short NEQ = 33;
		static public final short LT = 34;
		static public final short LEQ = 35;
		static public final short GT = 36;
		static public final short GEQ = 37;
	}

	static final ParsingTables PARSING_TABLES = new ParsingTables(
		"U9pDLbbq54KKlTqp94mm98W9YIX2nCb2zcMoaeH41QAYkAAuWKP5105tH86ue3d73u#VVgX" +
		"VVg8YHb717N731GNNgAX8t9N5$NchfgRJqzEJ2KVFmJxdzjlkgtvT$Qgg0NiEbk8Cj2E25a" +
		"n5AzfWoqvSZMjmBSRBx$8G9k0ObA0qWNUhcuV0S7YOYRaExtGSXnFHW2OqunHKubWiG2Voi" +
		"12BaOl3KiJ7fOWVaL37V9pbr347mQJrhi4yvxr#mXN9UF8ZhdHuF#2cORrNmP3HoKD6YtsY" +
		"vp3gxyr4DaRWVDo6DDoEaPJd8WEZS0Xknfa#EHDzHohqzKxpzKxtzNRvUcVvUizEEi8CppU" +
		"gGwF3gc1EOrnEcPSl3oUCC5hFwNpCngau3LSbnBtsFDIxdd8HBaOtBi6bk2nbvi6susVdmZ" +
		"YxXdsIBdzWXGX2o6AVhC2XfazqRykNg3PTlbpFs5WoSZ06LRX0li1Av9DnNHmZEgCtS4qim" +
		"rnvHBx2uMGSYQCm2M4SZI9CGIrNuFKeHmTEmWcqJiRnE8zFkbnsOH6Mu4QiuZVfmIsu0wjn" +
		"9mQlDR1WSxS9ihlJaCwA9vXwC$bDCpZE6Bx1MEuVNbvU7CyQ5az5OhmmLqCHLs49wozbZvM" +
		"pyoev3zMSnLfsvB#DU#i8SWN7wiWXajKx3laEJyMIyPJjnnkwhly#wk#DiDOcTciBkxA9dT" +
		"l2VQ2TEqq7kxBjW4RwFtYzS#zcPVdaUFcX14zqJeDSI#DvjcNxVbstdH$tb8bSUmLSUvDvH" +
		"gNAFDYsTtRYxGXNfrgzO9zOx1EBSnNjasXlXxYpHRNeZAbUp#3UtScJ98ExaEAtnZ6YCrfl" +
		"wWZfVR2LNAK7k6ifkv4hC8SoH4ushMp#OQWdAK#s$XgMFc#pA7EH9Sx5rGdqhkADnW150R6" +
		"8M4e40MiVO0Uevr7VhtWnqC#tjCd1RieqneKof4U5dHNbS0N3LfX051XV8VLYCqOLyteeIs" +
		"aifEHpiDB4QXZhfQoWSO$nbKIbDPjw#M0jrd8ZxoEwYGUDlTPTSpAGryVnwZplLqR$9bDpB" +
		"VNDz5MQs5JQMochZJtQPypjl7KRlT$bNq1#iyaBqzv5PKdg6krwKyjTr1kCVY$rHXEVmh6M" +
		"#UIf#UPtjbk9cIRl0Uej9jv5D14pY3PNNhkHiuYEc9#VTyiW1#k8zQvtSs8kNvTBt#dApNN" +
		"fuSGyH3psDYDxZBpR5UitydxFivizzWuZtuxshrLhxCNUv$k1rq0I$rxNCxplFsfGjqVwv6" +
		"vmSTrpiZQUPxt2$CpXr9dwFQn9IVnx3dmizFduUc4k#Kj#rf9t#Kr#bVtmNBBFqJxNzyyS#" +
		"rEYtx4#8JxMsaVoeRmf$8QoXNYHU4OsoKPvMfwI9sM3F26FQrwVl2yxP2ErxVAUzcoJTxLy" +
		"HrwMv#KvULPUqFPwub5Pf$N7zFqjsImloLPvGrwNr#HLuUpB1phoZRuFg15bjtmltyctJer" +
		"Vw$jUnzuZlt06$jRwdxofFyaq$a7O1FWN4U0vOHFGPqKCxTotft7$xI0tGZl2U1Lb3DKkr7" +
		"2C65evLZsbEYtgcLD7kmvgzmeOZ23IZRIDpzQeO8v29Ns5b0f5h46XdF5E3V2SidnHnhmoo" +
		"WQ3Kjgbb8qkX3b6cB9uI0HubWPvcWRuPwLWyLzB0PZ#3p6g8gu=");

	static final Action RETURN6 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 6];
		}
	};

	static final Action RETURN2 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 2];
		}
	};

	static final Action RETURN3 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 3];
		}
	};

	static final Action RETURN9 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 9];
		}
	};

	static final Action RETURN4 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 4];
		}
	};

	static final Action RETURN5 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 5];
		}
	};

	static final Action RETURN7 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 7];
		}
	};

	// turn off automated error recovery
	@Override
	protected void recoverFromError(Symbol token, TokenStream in) throws java.io.IOException, Exception {
		super.recoverFromError(new Symbol(0), in);
	}

	private final Action[] actions;

	public Parser() {
		super(PARSING_TABLES);
		actions = new Action[] {
			RETURN6,	// [0] Module = MODULE ID LCURLY Imports Declarations RCURLY; returns 'RCURLY' although none is marked
			RETURN2,	// [1] Imports = Import Imports; returns 'Imports' although none is marked
			Action.NONE,  	// [2] Imports = 
			RETURN3,	// [3] Import = IMPORT ID SEMICOLON; returns 'SEMICOLON' although none is marked
			RETURN2,	// [4] Declarations = Declaration Declarations; returns 'Declarations' although none is marked
			Action.NONE,  	// [5] Declarations = 
			Action.RETURN,	// [6] Declaration = FuncDeclare
			Action.RETURN,	// [7] Declaration = FieldDeclare
			Action.RETURN,	// [8] Declaration = TypeDeclare
			RETURN9,	// [9] FuncDeclare = AccessId TypeName ID LPAREN ParamList RPAREN LCURLY StmtList RCURLY; returns 'RCURLY' although none is marked
			RETURN4,	// [10] FieldDeclare = AccessId TypeName ID SEMICOLON; returns 'SEMICOLON' although none is marked
			RETURN6,	// [11] TypeDeclare = AccessId TYPE ID EQL STRING_LITERAL SEMICOLON; returns 'SEMICOLON' although none is marked
			Action.RETURN,	// [12] AccessId = PUBLIC
			Action.NONE,  	// [13] AccessId = 
			Action.RETURN,	// [14] TypeName = PrimitiveType
			Action.RETURN,	// [15] TypeName = ArrayType
			Action.RETURN,	// [16] TypeName = ID
			Action.RETURN,	// [17] PrimitiveType = VOID
			Action.RETURN,	// [18] PrimitiveType = BOOLEAN
			Action.RETURN,	// [19] PrimitiveType = INT
			RETURN3,	// [20] ArrayType = PrimitiveType LBRACKET RBRACKET; returns 'RBRACKET' although none is marked
			RETURN3,	// [21] ArrayType = ArrayType LBRACKET RBRACKET; returns 'RBRACKET' although none is marked
			RETURN3,	// [22] ArrayType = ID LBRACKET RBRACKET; returns 'RBRACKET' although none is marked
			RETURN2,	// [23] Param = TypeName ID; returns 'ID' although none is marked
			RETURN3,	// [24] ParamList = Param COMMA ParamList; returns 'ParamList' although none is marked
			Action.RETURN,	// [25] ParamList = Param
			Action.NONE,  	// [26] ParamList = 
			RETURN2,	// [27] StmtList = Stmt StmtList; returns 'StmtList' although none is marked
			Action.NONE,  	// [28] StmtList = 
			RETURN3,	// [29] Stmt = TypeName ID SEMICOLON; returns 'SEMICOLON' although none is marked
			RETURN3,	// [30] Stmt = LCURLY StmtList RCURLY; returns 'RCURLY' although none is marked
			RETURN5,	// [31] Stmt = IF LPAREN Expr RPAREN Stmt; returns 'Stmt' although none is marked
			RETURN7,	// [32] Stmt = IF LPAREN Expr RPAREN Stmt ELSE Stmt; returns 'Stmt' although none is marked
			RETURN5,	// [33] Stmt = WHILE LPAREN Expr RPAREN Stmt; returns 'Stmt' although none is marked
			RETURN2,	// [34] Stmt = BREAK SEMICOLON; returns 'SEMICOLON' although none is marked
			RETURN3,	// [35] Stmt = RETURN RightHSE SEMICOLON; returns 'SEMICOLON' although none is marked
			RETURN2,	// [36] Stmt = RETURN SEMICOLON; returns 'SEMICOLON' although none is marked
			RETURN2,	// [37] Stmt = Expr SEMICOLON; returns 'SEMICOLON' although none is marked
			Action.RETURN,	// [38] Expr = Assign
			Action.RETURN,	// [39] Expr = RightHSE
			RETURN3,	// [40] Assign = LeftHSE EQL Expr; returns 'Expr' although none is marked
			Action.RETURN,	// [41] LeftHSE = ID
			Action.RETURN,	// [42] LeftHSE = ArrayAcc
			RETURN4,	// [43] ArrayAcc = ID LBRACKET Expr RBRACKET; returns 'RBRACKET' although none is marked
			RETURN4,	// [44] ArrayAcc = ArrayAcc LBRACKET Expr RBRACKET; returns 'RBRACKET' although none is marked
			RETURN2,	// [45] RightHSE = ArithExpr RightHSEOpt; returns 'RightHSEOpt' although none is marked
			RETURN2,	// [46] RightHSEOpt = CompOp ArithExpr; returns 'ArithExpr' although none is marked
			Action.NONE,  	// [47] RightHSEOpt = 
			Action.RETURN,	// [48] CompOp = EQEQ
			Action.RETURN,	// [49] CompOp = NEQ
			Action.RETURN,	// [50] CompOp = LT
			Action.RETURN,	// [51] CompOp = LEQ
			Action.RETURN,	// [52] CompOp = GT
			Action.RETURN,	// [53] CompOp = GEQ
			new Action() {	// [54] ArithExpr = ArithExpr AddOp Term
				public Symbol reduce(Symbol[] _symbols, int offset) {
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 3]); return _symbols[offset + 1];
				}
			},
			new Action() {	// [55] ArithExpr = Term
				public Symbol reduce(Symbol[] _symbols, int offset) {
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1]); return new Symbol(lst);
				}
			},
			Action.RETURN,	// [56] AddOp = PLUS
			Action.RETURN,	// [57] AddOp = MINUS
			new Action() {	// [58] Term = Term MultOp Factor
				public Symbol reduce(Symbol[] _symbols, int offset) {
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 3]); return _symbols[offset + 1];
				}
			},
			new Action() {	// [59] Term = Factor
				public Symbol reduce(Symbol[] _symbols, int offset) {
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1]); return new Symbol(lst);
				}
			},
			Action.RETURN,	// [60] MultOp = TIMES
			Action.RETURN,	// [61] MultOp = DIV
			Action.RETURN,	// [62] MultOp = MOD
			RETURN2,	// [63] Factor = MINUS Factor; returns 'Factor' although none is marked
			Action.RETURN,	// [64] Factor = PExpr
			Action.RETURN,	// [65] PExpr = LeftHSE
			Action.RETURN,	// [66] PExpr = FuncCall
			Action.RETURN,	// [67] PExpr = ArrExpr
			Action.RETURN,	// [68] PExpr = STRING_LITERAL
			Action.RETURN,	// [69] PExpr = INT_LITERAL
			Action.RETURN,	// [70] PExpr = TRUE
			Action.RETURN,	// [71] PExpr = FALSE
			RETURN3,	// [72] PExpr = LPAREN Expr RPAREN; returns 'RPAREN' although none is marked
			RETURN4,	// [73] FuncCall = ID LPAREN ExprList RPAREN; returns 'RPAREN' although none is marked
			RETURN3,	// [74] ArrExpr = LBRACKET ExprListNE RBRACKET; returns 'RBRACKET' although none is marked
			new Action() {	// [75] ExprListNE = ExprListNE COMMA Expr
				public Symbol reduce(Symbol[] _symbols, int offset) {
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 3]); return _symbols[offset + 1];
				}
			},
			new Action() {	// [76] ExprListNE = Expr
				public Symbol reduce(Symbol[] _symbols, int offset) {
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1]); return new Symbol(lst);
				}
			},
			Action.RETURN,	// [77] ExprList = ExprListNE
			Action.NONE	// [78] ExprList = 
		};
	}

	protected Symbol invokeReduceAction(int rule_num, int offset) {
		return actions[rule_num].reduce(_symbols, offset);
	}
}
